<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using System.Net;
using Business.Infrastructure;
using Business.Linq;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace, Model.AbstractRepositoryNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>

namespace <#= Model.RepositoryNamespace #>
{
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
#>
    public class EF<#= Model.ModelNamePascalCase #>Repository : I<#= Model.ModelNamePascalCase #>Repository
    {
		private <#= contextName #> context = new <#= contextName #>();

        #region <#= modelName #>

        public List<<#= modelName #>> FindAll(int? skip = null, int? take = null, List<SortingInfo> sortings = null, FilterInfo filters = null)
        {
            IQueryable<<#= modelName #>> list = context.<#= modelNamePlural #>;

            if (filters != null && (filters.Filters != null && filters.Filters.Count > 0))
            {
                filters.FormatFieldToUnderscore();
                GridHelper.ProcessFilters<<#= modelName #>>(filters, ref list);
            }

            if (sortings != null && sortings.Count > 0)
            {
                foreach (var s in sortings)
                {
                    s.FormatSortOnToUnderscore();
                    list = list.OrderBy<<#= modelName #>>(s.SortOn + " " + s.SortOrder);
                }
            }
            else
            {
                list = list.OrderBy<<#= modelName #>>("<#= primaryKeyProperty.Name #> desc"); //default, wajib ada atau EF error
            }

            //take & skip
            var takeList = list;
            if (skip != null)
            {
                takeList = takeList.Skip(skip.Value);
            }
            if (take != null)
            {
                takeList = takeList.Take(take.Value);
            }

            //return result
            //var sql = takeList.ToString();
            List<<#= modelName #>> result = takeList.ToList();
            return result;
        }

        public <#= modelName #> FindByPk(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return context.<#= modelNamePlural #>.Find(id);
        }

        public int Count(FilterInfo filters = null)
        {
            IQueryable<<#= modelName #>> items = context.<#= modelNamePlural #>;

            if (filters != null && (filters.Filters != null && filters.Filters.Count > 0))
            {
                GridHelper.ProcessFilters<<#= modelName #>>(filters, ref items);
            }

            return items.Count();
        }

        public void Save(<#= modelName #> dbItem)
        {
            if (dbItem.id == 0) //create
            {
                context.<#= modelNamePlural #>.Add(dbItem);
            }
            else //edit
            {
                var entry = context.Entry(dbItem);
                entry.State = EntityState.Modified;
            }
            context.SaveChanges();
        }

        public void Delete(<#= modelName #> dbItem)
        {
            context.<#= modelNamePlural #>.Remove(dbItem);
            context.SaveChanges();
        }

		public int GetIdByNameAndInsert(string name)
        {
            int id;
            <#= modelName #> data = (from a in context.<#= modelNamePlural #> where a.name == name select a).FirstOrDefault();
            if (data == null)
            {
				//Uncomment the following function if inserting new data by using just name is possible
                //<#= modelName #> insert = new <#= modelName #>();
                //insert.name = name;
                //context.<#= modelNamePlural #>.Add(insert);
                //context.SaveChanges();
                //id = insert.id;

				id=0;
            }
            else
            {
                id = data.id;
            }

            return id;

        }

        #endregion
	}
}