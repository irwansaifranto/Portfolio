<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="RekadiaPS" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
	var modelProperties = GetModelProperties(modelType, true);
	var countForeignItem = modelProperties.Count(p => p.IsForeignItem);
	var count = 0;
	var displayName = Regex.Replace(Regex.Replace(modelName, @"_(\p{Ll})",m => " " + m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
#>
@using WebUI.Extension;
@using MvcSiteMapProvider.Web.Html;
@{
    ViewBag.Title = "<#= displayName #>";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentController = (<#= Model.ControllerNamespace #>.<#= Model.ModelNamePascalCase #>Controller)ViewContext.Controller;
}
<div class="page-header">
    <div class="btn-group pull-right">
        @Html.ActionLink("Add <#= displayName #>", "Create", new { area = "" }, new { @class = "btn btn-default" })
		@Html.ActionLink("Upload Excel", "ImportExcel", new { area = "" }, new { @class = "btn btn-default" })
    </div>
    <h1>@ViewBag.Title</h1>
</div>
@Html.Raw(currentController.GetMessage())
<div id="grid"></div>

@section scripts
    {
    <script type="text/javascript">

        function deleteItem(e) {
            e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));
            goToDeletePage('@Url.Action("Delete")' + "?id=" + data.Id,this.dataSource);
        }

        function editItem(e) {
            e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));
            window.location.href = "@Url.Action("Edit")" + "?id=" + data.Id;
        }

        $(document).ready(function () {

            var ds = {
                pageable: true,
                pageSize: 10,
                serverFiltering: true,
                serverPaging: true,
                serverSorting: true,
                sortable:true,
                transport: {
                    read: {
                        url: "@Url.Action("Binding")",
                        dataType: "json",
                        type:"POST",
                    },
                    parameterMap: function (options, operation) {
                        if (operation !== "read" && options != '') {
                            return kendo.stringify(options);
                        }
                        else if (operation == "read") {
<#
if (countForeignItem > 0) {
#>
							if (options.filter) {
                                filter = options.filter.filters;
                                for (var i in filter) {
<#
foreach (ModelProperty property in modelProperties) {
	if (property.IsForeignItem && property.DbItemExpression != null) {
#>
									if (filter[i].field == "<#= property.NamePascalCase #>") {
                                        filter[i].field = "<#= property.DbItemExpression #>";
                                    }
<#	
	}
}
#>
                                }
                            }

                            if (options.sort) {
                                sort = options.sort;
                                for (var i in sort) {
<#
foreach (ModelProperty property in modelProperties) {
	if (property.IsForeignItem && property.DbItemExpression != null) {
#>
									if (sort[i].field == "<#= property.NamePascalCase #>") {
                                        sort[i].field = "<#= property.DbItemExpression #>";
                                    }
<#	
	}
}
#>
                                }
                            }
<#
}
#>
                            return options;
                        }
                    }
                },
				schema: {
                    data: "data",
                    total: "total",
                    model: {
                        fields: {
<#
foreach (ModelProperty property in modelProperties) {
	if (property.DbItemExpression != null) {
#>
							"<#= property.NamePascalCase #>": { type: "<#= property.KendoType #>" },
<#	
	}
}
#>
                        }
                    }
                },
            };

            $("#grid").kendoGrid({
                dataSource: ds,
                filterable: true,
                pageable: true,
                sortable: true,
                resizable: true,
                columns: [
<#
foreach (ModelProperty property in modelProperties) {
	if (property.DbItemExpression != null && !property.IsForeignKey && !property.IsPrimaryKey) {
#>
					{
                        field: "<#= property.NamePascalCase #>",
                        title: "<#= property.DisplayName #>",
                    },
<#	
	}
}
#>
                    {
                        command: [
                            {
                                name: "edit",
                                text: "edit",
                                click: editItem,
                                imageClass: "glyphicon glyphicon-edit",
                                template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=imageClass#"></span></a>'
                            },
                            {
                                name: "delete",
                                text: "delete",
                                click: deleteItem,
                                imageClass: "glyphicon glyphicon-remove",
                                template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                            }
                        ],
                        width: "90px"
                    }
                ],
            });
        });
    </script>
}

<#+
// Describes the information about a property on the model
// Product
class ModelProperty {
    public string Name { get; set; }
    public string NamePascalCase { get; set; }
    public string DisplayName { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool IsForeignItem { get; set; }
	public bool IsChildItem { get; set; }
	public EnvDTE.CodeProperty SubProperty { get; set; }
	public string KendoType { get; set; }
	public string DbItemExpression { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(byte),
    typeof(long),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
		prop.DisplayName = Regex.Replace(Regex.Replace(prop.Name, @"_(\p{Ll})",m => " " + m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
		if (!prop.IsPrimaryKey)
		{
			prop.DisplayName = Regex.Replace(prop.DisplayName, @"\s(Id)\s", "");
		}

		prop.KendoType = "string";
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>() || prop.Type.UnderlyingTypeIs<int>() || prop.Type.UnderlyingTypeIs<byte>() || prop.Type.UnderlyingTypeIs<long>()) {
            prop.KendoType = "number";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.KendoType = "date";
        }
        else if (prop.Type.UnderlyingTypeIs<bool>()) {
            prop.KendoType = "boolean";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
			var subProperty = GetDbItemExpression((EnvDTE.CodeType)prop.Type.CodeType);
			if (subProperty != null) {
				prop.IsForeignItem = true;
				prop.SubProperty = subProperty;
				prop.DisplayName += " " + Regex.Replace(Regex.Replace(subProperty.Name, @"_(\p{Ll})",m => " " + m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
				prop.NamePascalCase += Regex.Replace(Regex.Replace(subProperty.Name, @"_(\p{Ll})",m => m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
				prop.DbItemExpression = prop.Name + "." + subProperty.Name;
				prop.Type = subProperty.Type;
			} else {
				prop.IsForeignItem = false;
				prop.IsChildItem = true;
				prop.DbItemExpression = null;
			}

		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] dbItemPropertyNames = new[] { "name", "title", "last_name", "surname", "subject", "count" };

EnvDTE.CodeProperty GetDbItemExpression(EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(dbItemPropertyNames);
		if (chosenSubproperty != null) {
			return chosenSubproperty;
		}
	}
	return null;
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					NamePascalCase =  Regex.Replace(Regex.Replace(prop.Name, @"_(\p{Ll})",m => m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper()),
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					DbItemExpression = prop.Name,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty.Name == prop.Name),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RekadiaPS.RelatedEntityLocators.RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RekadiaPS.RelatedEntityLocators.RelatedEntityInfo>().Where(x => x.RelationType == RekadiaPS.RelatedEntityLocators.RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>