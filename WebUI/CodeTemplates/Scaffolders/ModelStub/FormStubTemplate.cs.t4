<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="RekadiaPS" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ Output Extension="cs" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# foreach(var ns in new[] { Model.ModelTypeNamespace, Model.DbContextNamespace }.Where(x => !string.IsNullOrEmpty(x) && (x != Model.RepositoryNamespace)).Distinct()) { #>
using <#= ns #>;
<# } #>

namespace <#= Model.ModelStubNamespace #>
{
<# 
    var modelType = (CodeType)Model.ModelType; 
    var modelName = modelType.Name; 
    var modelNamePlural = Model.ModelTypePluralized; 
    var contextName = ((CodeType)Model.DbContextType).Name; 
    var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
    var isObjectContext = ((CodeType)Model.DbContextType).IsAssignableTo<System.Data.Objects.ObjectContext>();
	var modelProperties = GetModelProperties(modelType, true);
	var countForeignItem = 0;
	var count = 0;
	var displayName = Regex.Replace(Regex.Replace(modelName, @"_(\p{Ll})",m => " " + m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
#>
    public class <#= Model.ModelNamePascalCase #>FormStub
    {
		// Example model value from scaffolder script: <#= ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Count() #>
<#
foreach (ModelProperty property in modelProperties) {
	if (!property.IsForeignItem && !property.IsChildItem) {
#>
		[DisplayName("<#= property.DisplayName #>")]
<#
		if (property.IsRequired) {
#>
        [Required(ErrorMessageResourceName = "Required", ErrorMessageResourceType = typeof(Resources.MyGlobalErrors))]
<#
		}
#>
		public <#= property.Type.AsString #> <#= property.NamePascalCase #> { get; set; }

<#
	} else if (property.IsForeignItem) {
		countForeignItem++;
#>
		public List<SelectListItem> <#= property.NamePascalCase #>Options { get; set; }

<#	
	}
}
#>
		public <#= Model.ModelNamePascalCase #>FormStub() { }

<#
if (countForeignItem > 0) {
#>
		public <#= Model.ModelNamePascalCase #>FormStub(<#
	foreach (ModelProperty property in modelProperties) {
		if (property.IsForeignItem) {
			count++;
#>List<<#= property.Type.AsString #>> list<#= property.NamePascalCase #><#= count != countForeignItem ? "," : "" #><#
		}
	}
#>)
			: this()
		{
<#
	count = 0;
	foreach (ModelProperty property in modelProperties) {
		if (property.IsForeignItem) {
			count++;
#>
			this.Fill<#= property.NamePascalCase #>Options(list<#= property.NamePascalCase #>);
<#
		}
	}
#>
		}

<#
}
#>

		public <#= Model.ModelNamePascalCase #>FormStub(<#= modelName #> dbItem<#= countForeignItem > 0 ? "," : "" #><#
count = 0;
foreach (ModelProperty property in modelProperties) {
	if (property.IsForeignItem) {
		count++;
#>List<<#= property.Type.AsString #>> list<#= property.NamePascalCase #><#= count != countForeignItem ? "," : "" #><#
	}
}
#>)
			: this(<#
count = 0;
foreach (ModelProperty property in modelProperties) {
	if (property.IsForeignItem) {
		count++;
#>list<#= property.NamePascalCase #><#= count != countForeignItem ? ", " : "" #><#
	}
}
#>)
		{
<#
count = 0;
foreach (ModelProperty property in modelProperties) {
	if (!property.IsForeignItem && !property.IsChildItem) {
		count++;
#>
			this.<#= property.NamePascalCase #> = dbItem.<#= property.Name #>;
<#
	}
}
#>
		}

		public <#= modelName #> GetDbObject(<#= modelName #> dbItem) {
<#
count = 0;
foreach (ModelProperty property in modelProperties) {
	if (!property.IsForeignItem && !property.IsChildItem) {
		count++;
#>
			dbItem.<#= property.Name #> = this.<#= property.NamePascalCase #>;
<#
	}
}
#>
			return dbItem;
		}

		#region options

<#
count = 0;
foreach (ModelProperty property in modelProperties) {
	if (property.IsForeignItem) {
		count++;
#>
		public void Fill<#= property.NamePascalCase #>Options(List<<#= property.Type.AsString #>> list)
		{
			<#= property.NamePascalCase #>Options = new List<SelectListItem>();
			<#= property.NamePascalCase #>Options.Add(new SelectListItem { Text = "Choose One", Value = "" });
			foreach (<#= property.Type.AsString #> item in list)
            {
                <#= property.NamePascalCase #>Options.Add(new SelectListItem { Text = item.<#= property.SubProperty.Name #>, Value = item.id.ToString() });
            }
		
		}
<#
	}
}
#>

		#endregion

	}
}

<#+
// Describes the information about a property on the model
// Product
class ModelProperty {
    public string Name { get; set; }
    public string NamePascalCase { get; set; }
    public string DisplayName { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool IsForeignItem { get; set; }
	public bool IsChildItem { get; set; }
	public bool IsRequired { get; set; }
	public EnvDTE.CodeProperty SubProperty { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
		prop.DisplayName = Regex.Replace(Regex.Replace(prop.Name, @"_(\p{Ll})",m => " " + m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper());
		if (!prop.IsPrimaryKey)
		{
			prop.DisplayName = Regex.Replace(prop.DisplayName, @"\s(Id)\s", "");
		}


        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
			var subProperty = GetDbItemExpression((EnvDTE.CodeType)prop.Type.CodeType);
			if (subProperty != null) {
				prop.IsForeignItem = true;
				prop.SubProperty = subProperty;
			} else {
				prop.IsForeignItem = false;
				prop.IsChildItem = true;
			}

		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] dbItemPropertyNames = new[] { "name", "title", "last_name", "surname", "subject", "count" };

EnvDTE.CodeProperty GetDbItemExpression(EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(dbItemPropertyNames);
		if (chosenSubproperty != null) {
			return chosenSubproperty;
		}
	}
	return null;
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					NamePascalCase =  Regex.Replace(Regex.Replace(prop.Name, @"_(\p{Ll})",m => m.Groups[1].Value.ToUpper()), @"\b(\p{Ll})",m => m.Groups[1].Value.ToUpper()),
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty.Name == prop.Name),
					IsReadOnly = !prop.IsWriteable(),
					IsRequired = !IsNullable(prop.Type)
				});
			}
		}
	}

    return results;
}

IEnumerable<RekadiaPS.RelatedEntityLocators.RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RekadiaPS.RelatedEntityLocators.RelatedEntityInfo>().Where(x => x.RelationType == RekadiaPS.RelatedEntityLocators.RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}

bool IsNullable(EnvDTE.CodeTypeRef propType) {
  return propType.AsFullName.Contains(".Nullable<");
}
#>