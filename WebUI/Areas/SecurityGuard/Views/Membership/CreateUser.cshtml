@model WebUI.Areas.SecurityGuard.ViewModels.RegisterViewModel

@{
    ViewBag.Title = "CreateUser";
    //Layout = "~/Areas/SecurityGuard/Views/Shared/_SecurityGuardLayoutPage.cshtml";
}

<div id="breadcrumb">
    @Html.ActionLink("Dashboard", "Index", "Dashboard") > 
    @Html.ActionLink("Manage Users", "Index", "Membership") > 
    Create User
</div>

<div class="page-header">
	<h1>Create User</h1>
</div>

@*<ul>
    <li>To be a minimum of @Membership.MinRequiredPasswordLength characters in length.</li>
    @if (Membership.MinRequiredNonAlphanumericCharacters > 0)
    {
        <li>To have a minimum of @Membership.MinRequiredNonAlphanumericCharacters non-alpha numeric characters included, such as &quot;<span style="font-family: Courier New; font-size: 16px;">(){}-_*&^%$#@@!</span>&quot;.</li>
    }
</ul>*@
@using (Html.BeginForm(ViewContext.RouteData.GetRequiredString("action"), ViewContext.RouteData.GetRequiredString("controller"), FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.ValidationSummary(true)
    
    <div class="form-group">
        @Html.LabelFor(model => model.UserName, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserName)
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.Email, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Email)
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.Password, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Password)
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmPassword)
        </div>
    </div>

    if (Model.RequireSecretQuestionAndAnswer)
    {
    <div class="form-group">
        @Html.LabelFor(model => model.SecretQuestion, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.TextBoxFor(model => model.SecretQuestion, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SecretQuestion)
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.SecretAnswer, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.TextBoxFor(model => model.SecretAnswer, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SecretAnswer)
        </div>
    </div>
    }
    
    <div class="form-group">
        @Html.LabelFor(model => model.Approve, new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            @Html.EditorFor(model => model.Approve)
            @Html.ValidationMessageFor(model => model.Approve)
        </div>
    </div>


    @Html.HiddenFor(model => model.RequireSecretQuestionAndAnswer)
	<div class="form-group">
		<div class="col-xs-offset-2 col-xs-10">
			<button type="submit" class="btn btn-default">Create</button>
            @Html.ActionLink("Back to Manage Users", "Index")
		</div>
	</div>
}

@section sgscripts
{
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(function () {

        var msg = $("#username-message");
        var btn = $("input[type='submit']");

        $("#UserName").focus();

        $("#UserName").blur(function () {

            var username = $(this).val();

            if (username.length == 0) {
                alert("No username.");
                return;
            }

            $.ajax({
                url: '@Url.Action("CheckForUniqueUser", "Membership")',
                dataType: 'json',
                type: 'GET',
                data: { userName: username },
                success: OnCheckForUniqueUserSuccess,
                error: OnCheckForUniqueUserError
            });
        });

        function OnCheckForUniqueUserSuccess(data) {
            if (data.Exists) {
                msg.text("This username already exists.  Please enter a new one.");
                btn.attr("disabled", "disabled");
            } else {
                msg.text("");
                btn.removeAttr("disabled");
            }
        }

        function OnCheckForUniqueUserError(xhr, status, error) {
            msg.text("There was an error checking uniqueness.");
        }
    });

</script>
}