@model SecurityGuard.ViewModels.UserViewModel
@{
    ViewBag.Title = "UserDetails";
    //Layout = "~/Areas/SecurityGuard/Views/Shared/_SecurityGuardLayoutPage.cshtml";
}
<div id="breadcrumb">
    @Html.ActionLink("Dashboard", "Index", "Dashboard") >
    @Html.ActionLink("Manage Users", "Index", "Membership") > User Details
</div>

<div class="page-header">
	<h1>User Details</h1>
</div>

@{
    if (TempData.Keys.Contains("SuccessMessage"))
    {
    <ul class="system_messages">
        <li class="green"><span class="ico"></span><strong class="system_title">@TempData["SuccessMessage"]</strong></li>
    </ul>

    }
    else if (TempData.Keys.Contains("ErrorMessage"))
    {
    <ul class="system_messages">
        <li class="red"><span class="ico"></span><strong class="system_title">@TempData["ErrorMessage"]</strong></li>
    </ul>
        
    }
}
@using (Html.BeginForm("UpdateDeleteCancel", "Membership", new { userName = @Model.User.UserName }, FormMethod.Post, new { @class = "form-horizontal", id = "user-form" }))
{
    @Html.ValidationSummary(true)

    <div class="form-group">
        @Html.LabelFor(model => model.User.UserName, "Username", new { @class = "col-xs-2 control-label" })
		<div class="col-xs-4">
            <div class="form-control-static">@Model.User.UserName</div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.User.Email, new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            @Html.EditorFor(model => model.User.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.User.Email)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.User.Comment, new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            @Html.TextAreaFor(model => model.User.Comment, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.User.Comment)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.User.IsApproved, "Is Approved", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">
                @{
    string btnLblApprove = "";
    string cssClass = "";
    if (Model.User.IsApproved)
    {
        btnLblApprove = "Deny";
        cssClass = "positive";
    }
    else
    {
        btnLblApprove = "Approve";
        cssClass = "negative";
    }
                <text><span id="approve-deny-div" class="system @cssClass">@(Model.User.IsApproved ? "Approved" : "Not Approved")</span></text>
                <text>&nbsp;- <a id="btn-approve" href="javascript:">@btnLblApprove</a></text>
                }
            </p><span class="system" id="approve-message"></span>
            @Html.ValidationMessageFor(model => model.User.IsApproved)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.User.IsLockedOut, "Is Locked Out", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">
                @{                    
    if (Model.User.IsLockedOut)
    {
        cssClass = "negative";
    }
    else
    {
        cssClass = "positive";
    }
                    <text><span id="locked-unlocked-div" class="system @cssClass">@(Model.User.IsLockedOut ? "Locked" : "Unlocked")</span> </text>
    if (Model.User.IsLockedOut)
    { 
                        <span id="unlock-span">&nbsp;- <a id="btn-lock" href="#">Unlock</a></span>    
    }
                }
                <span class="system" id="lock-message"></span>
            </p>
            @Html.ValidationMessageFor(model => model.User.IsLockedOut)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.User.IsOnline, "Is Online", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">
                @{
    if (Model.User.IsOnline)
    {
                    <text>Online</text>
    }
    else
    {
                    <text>Off-line</text>
    }
                }
            </p>
            @Html.ValidationMessageFor(model => model.User.IsOnline)
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.User.LastActivityDate, "Last Activity Date", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">@Model.User.LastActivityDate</p>
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.User.LastLockoutDate, "Last Lockout Date", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">@Model.User.LastLockoutDate</p>
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.User.LastLoginDate, "Last Login Date", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">@Model.User.LastLoginDate</p>
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(model => model.User.LastPasswordChangedDate, "Last Passwd Chng Date", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">@Model.User.LastPasswordChangedDate</p>
        </div>
    </div>
    
    if (@Model.RequiresSecretQuestionAndAnswer)
    {
    <div class="form-group">
        @Html.LabelFor(model => model.User.PasswordQuestion, "Password Question", new { @class = "col-xs-2 control-label" })
        <div class="col-xs-4">
            <p class="form-control-static">@Model.User.PasswordQuestion</p>
        </div>
    </div>
    }
    
    <fieldset>
        <legend>Roles for @Model.User.UserName (@Html.ActionLink("Edit", "GrantRolesToUser", "Membership", new { userName = @Model.User.UserName }, null))</legend>
        <ul>
            @foreach (var role in @Model.Roles)
            {
                <li>@role</li>
            }
        </ul>
    </fieldset>
    @Html.HiddenFor(model => model.User.UserName)
    @Html.HiddenFor(model => model.User.ProviderUserKey)
    
	<div class="form-group">
		<div class="col-xs-offset-2 col-xs-10">
            <input type="submit" value="Cancel" name="UserCancel" class="btn btn-default" />&nbsp;
            <input type="submit" value="Delete" name="DeleteUser" id="DeleteUser" class="btn btn-default" />&nbsp;
            <input type="submit" value="Update" name="UpdateUser" class="btn btn-default" />&nbsp;
		</div>
	</div>
    
}

@section sgscripts
{
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(function () {


        $("#DeleteUser").click(function () {
            if (confirm("Are you sure you want to delete this user?  This will delete the user and any granted roles.")) {
                return true;
            } else {
                return false;
            }
        });



        /*****************************************************
        * Begin Approve/Deny functions
        *****************************************************/
        var approveMsg = $("#approve-message");
        $("#btn-approve").click(function () {
            var userName = $("#User_UserName");

            $.ajax({
                url: '@Url.Action("ApproveDeny", "Membership")',
                dataType: 'json',
                type: 'POST',
                data: { userName: userName.val() },
                success: OnApproveDenySuccess,
                error: OnApproveDenyError
            });
        });

        function OnApproveDenySuccess(data) {
            if (data.Success) {
                approveMsg.text(data.Message).addClass("positive").show().delay(3000).fadeOut();
                if (data.Approved) {
                    $("#btn-approve").text("Deny");
                    $("#approve-deny-div").text("Approved").addClass("system").addClass("positive").removeClass("negative");
                } else {
                    $("#btn-approve").text("Approve");
                    $("#approve-deny-div").text("Not Approved").addClass("system").addClass("negative").removeClass("positive");
                }
                $("span .approved-notice").text(data.ApprovedStatus);

            } else {
                approveMsg.text(data.Message).addClass("negative").delay(5000).fadeOut();
            }
        }

        function OnApproveDenyError(xhr, status, error) {
            approveMsg.text(error).addClass("negative").delay(5000).fadeOut();
        }

        /*****************************************************
        * End Approve/Deny functions
        *****************************************************/






        /*****************************************************
        * Begin Unlock functions
        *****************************************************/

        var lockMsg = $("#lock-message");

        $("#btn-lock").click(function () {
            var userName = $("#User_UserName");

            $.ajax({
                url: '@Url.Action("Unlock", "Membership")',
                dataType: 'json',
                type: 'POST',
                data: { userName: userName.val() },
                success: OnUnlockSuccess,
                error: OnUnlockError
            });
        });

        function OnUnlockSuccess(data) {
            if (data.Success) {
                lockMsg.text(data.Message).addClass("positive").show().delay(3000).fadeOut();
                if (data.Locked) {
                    $("#locked-unlocked-div").text(data.LockedStatus).removeClass("positive").addClass("negative");
                } else {
                    $("#unlock-span").hide();
                    $("#locked-unlocked-div").text(data.LockedStatus).removeClass("negative").addClass("positive");
                }
            } else {
                lockMsg.text(data.Message).addClass("negative").delay(5000).fadeOut();
            }
        }

        function OnUnlockError(xhr, status, error) {
            lockMsg.text(error).addClass("negative").delay(5000).fadeOut();
        }

        /*****************************************************
        * End Unlock functions
        *****************************************************/




    });
</script>
}
