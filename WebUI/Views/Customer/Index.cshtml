`@using WebUI.Extension;
@using MvcSiteMapProvider.Web.Html;
@{
    ViewBag.Title = "Tamu";
    //Layout = "~/Views/Shared/_Layout.cshtml";
    var currentController = (WebUI.Controllers.CustomerController)ViewContext.Controller;
}
<div class="page-header">
    <div class="btn-group pull-right">
        @Html.ActionLink("Tambah Tamu", "Create", new { area = "" }, new { @class = "btn btn-default" })
    </div>
    <h1>@ViewBag.Title</h1>
</div>
@Html.Raw(currentController.GetMessage())
<div id="grid"></div>

@section scripts
    {
    <script type="text/javascript">

        function deleteItem(e) {
            e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));
            goToDeletePage('@Url.Action("Delete")' + "?id=" + data.Id,this.dataSource);
        }

        function editItem(e) {
            e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));
            window.location.href = "@Url.Action("Edit")" + "?id=" + data.Id;
        }

        function ListTypeCustomer(element) {
            element.kendoDropDownList({
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    data: @Html.Raw(ViewBag.ListTypeCustomer)
                },
                optionLabel: "--Pilih--",
            });
        }

        function ListName (element) {
            element.kendoDropDownList({
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    data: @Html.Raw(ViewBag.ListName)
                },
                optionLabel: "--Pilih--",
            });
        }

        $(document).ready(function () {

            var ds = {
                pageable: true,
                pageSize: 10,
                serverFiltering: true,
                serverPaging: true,
                serverSorting: true,
                sortable:true,
                transport: {
                    read: {
                        url: "@Url.Action("Binding")",
                        dataType: "json",
                        type:"POST",
                    },
                    parameterMap: function (options, operation) {
                        if (operation !== "read" && options != '') {
                            return kendo.stringify(options);
                        }
                        else if (operation == "read") {
							if (options.filter) {
                                filter = options.filter.filters;
                                for (var i in filter) {
									if (filter[i].field == "OwnerName") {
                                        filter[i].field = "owner.name";
                                    }
                                }
                            }

                            if (options.sort) {
                                sort = options.sort;
                                for (var i in sort) {
									if (sort[i].field == "OwnerName") {
                                        sort[i].field = "owner.name";
                                    }
                                }
                            }
                            return options;
                        }
                    }
                },
				schema: {
                    data: "data",
                    total: "total",
                    model: {
                        fields: {
							"Id": { type: "string" },
							"Name": { type: "string" },
							"CustomerType": { type: "string" },
							"PhoneNumber": { type: "string" },
							"Address": { type: "string" },
							"City": { type: "string" },
							"Email": { type: "string" },
							"Notes": { type: "string" },
							"IdOwner": { type: "string" },
							"OwnerName": { type: "string" },
                        }
                    }
				},
				sort: { field: "name", dir: "asc" }
            };

            $("#grid").kendoGrid({
                dataSource: ds,
                filterable: kendoGridFilterable,
                pageable: true,
                sortable: true,
                resizable: true,
                columns: [
                    {
                        command: [
                            {
                                name: "edit",
                                text: "edit",
                                click: editItem,
                                imageClass: "glyphicon glyphicon-edit",
                                template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=imageClass#"></span></a>'
                            },
                            //{
                            //    name: "delete",
                            //    text: "delete",
                            //    click: deleteItem,
                            //    imageClass: "glyphicon glyphicon-remove",
                            //    template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                            //}
                        ],
                        width: 45
                    },
                    {
                        field: "Photo",
                        title: "Foto",
                        template: "<img src ='#: Photo#' class='img-responsive' alt='' />", 
                        width: 150
                    },
					{
                        field: "Name",
                        title: "Nama",
                        width: 120
					},
					{
					    field: "CustomerType",
                        title: "Tipe",
                        filterable: {
                            ui: ListTypeCustomer,
                            operators: {
                                string: {
                                    eq: "Sama Dengan",
                                }
                            },
                            extra: false,
                        },
                        template: '#= ((CustomerType == null) ? "" : TypeName) #',
                        width: 80
					},
					{
					    field: "PhoneNumber",
                        title: "Nomor Telpon",
					    template: '#= ((PhoneNumber == null) ? "" : PhoneNumber) + ((PhoneNumber2 == null) ? "" : "<br/>" + PhoneNumber2) #', 
					    width: 150
					},
					{
                        field: "Address",
                        title: "Alamat",
                        width: 150
					},
					{
                        field: "City",
                        title: "Kota",
                        width: 120
					},
					{
                        field: "Email",
                        title: "Email",
                        width: 150
					},					
                    {
                        field: "Company",
                        title: "Perusahaan",
                        width: 150
                    },
                ],
            });
        });
    </script>


}

